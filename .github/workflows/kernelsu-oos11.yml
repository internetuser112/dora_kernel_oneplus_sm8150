name: Build OnePlus-Sm8150-Kernel-OOS11
on:
  workflow_dispatch:
  schedule:
      # Run once a week on Sunday at midnight. See http://crontab.guru
      - cron: '0 21 * * *'
  push:
    branches:
      - master
  pull_request:
      branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "blu_spark_defconfig"
      KERNEL_CMDLINE: "ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-androidkernel- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=out"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 1
    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      
    - name: Remove unnecessary files
      run: |
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Install dependencies
      run: |
        sudo apt-get update -y 
        sudo apt install gcc-aarch64-linux-gnu -y
        sudo apt install gcc-arm-linux-gnueabi -y
        wget https://github.com/ZyCromerZ/Clang/releases/download/17.0.0-20230725-release/Clang-17.0.0-20230725.tar.gz clang
        tar -xf *gz
        sudo apt install binutils make python3 libssl-dev build-essential bc  bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs dos2unix -y
        git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 aarch64 --depth=1
        git clone https://github.com/snowwolf725/AnyKernel3 -b oneplus7 --depth=1
        rm -rf AnyKernel3/.git
    - name: Remove unnecessary files
      run: |
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Config KSU
      run: |
        sudo rm -rf ./KernelSU
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

    - name: 🦾 Setup Kali-Nethunter
      run: |
        git clone https://github.com/tomxi1997/kali-nethunter_patches.git
        patch -p1 < kali-nethunter_patches/add-rtl88xxau-5.6.4.2-drivers.patch
        patch -p1 < kali-nethunter_patches/add-wifi-injection-4.14.patch
        patch -p1 < kali-nethunter_patches/fix-ath9k-naming-conflict.patch
        sleep 8
        git clone https://github.com/acai66/Kali-defconfig-checker kali
        cd kali
        chmod +x *.sh
        chmod +x check-kernel-config
        cp * ..
        cd ..
        ./check-kernel-config arch/arm64/configs/$KERNEL_DEFCONFIG -w    

    - name: Config LXC
      run: |
        cd $GITHUB_WORKSPACE
        wget https://github.com/wu17481748/lxc-docker/releases/download/lxc-docker-2config/LXC-DOCKER-OPEN-CONFIG.sh
        chmod 777 LXC-DOCKER-OPEN-CONFIG.sh
         ./LXC-DOCKER-OPEN-CONFIG.sh arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }} -w

    - name: 开启KVM配置
      run: |
          cd $GITHUB_WORKSPACE
          echo "CONFIG_VIRTUALIZATION=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
          echo "CONFIG_KVM=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
          echo "CONFIG_VHOST_NET=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
          echo "CONFIG_VHOST_CROSS_ENDIAN_LEGACY=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}

    - name: 关闭ANDROID_PARANOID_NETWORK配置
      run: |
        cd $GITHUB_WORKSPACE
        sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
    
    
    - name: Build Kernel
      run: |
       find ./ -name Kconfig -exec dos2unix {} \;
       export PATH=$(pwd)/clang/bin/:$(pwd)/aarch64/bin/:$PATH
       export ARCH=arm64
       export SUBARCH=arm64
       export LD=ld.lld
       export BRAND_SHOW_FLAG=oneplus
       export TARGET_PRODUCT=msmnile
       make $KERNEL_CMDLINE $KERNEL_DEFCONFIG CC="ccache clang-14"
       make $KERNEL_CMDLINE CC="ccache clang-14" -j$(nproc --all)
       cp out/arch/arm64/boot/Image AnyKernel3
    - name: Upload Kernel-SU
      uses: actions/upload-artifact@v4
      with:
        name: OP7-OOS11-kernel-SU
        path: "AnyKernel3/*"
